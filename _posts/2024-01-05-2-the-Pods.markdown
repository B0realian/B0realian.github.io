---
layout: default
modal-id: 1
date: 2024-01-05
img: podssmall.png
alt: image-alt
project-date: January 2024
client: School Project
category: Games Development
description: 2D asymmetrical couch co-op platformer.
---

This was my first real school project, after only three months of getting to know Unity and C#. Three programmers teamed up
with three artists for 7 weeks of furious development. One player controls the little astronaut, the other player moves the modules
around to create a path for the first player. The astronaut has an oxygen gauge that runs down, inciting the players to hurry.
There are also a number of deadly traps strewn across the modules for the astronaut to avoid. Upon death, the astronaut is
simply returned to the start of the level but the modules remain in place. Every new level, the roles are interchanged.

![Full screenshot of 2-the-Pods](img/portfolio/Pods/Screenshot.png "Get to the pods!")

Initially, I was only supposed to do character movement, which in itself is often a large post and in this case made more
complicated by the fact that gravity can be turned off which changes movement dramatically. In any case, the other team
members had requested Celeste-like movement (without double jumping or dashes) which I obviously couldn't manage due to
inexperience and the time restraint. But I did want to lower gravity near the apex of the jump to make it feel nicer and
after experimenting with various solutions I came up with this:

´´´csharp
    if (_jumpTimer > jumpForce / (normalGravity * 9.81f) * (1 - apexRatio)) ChangeGravity(jumpApexGravity);
´´´

I also wanted the astronaut to stick to surfaces while in zero-G. Something like:

![Magboots in action](img/portfolio/Pods/magboots.gif "Making Kubrick proud!")

so I resorted to a raytrace downwards that returns the normal of surfaces fairly close and rotating the astronaut to the
closest increment of 45&deg;.

´´´c_cpp
    void AlignWithGround()
    {
        if (gravity) return;
        RaycastHit2D hitLeft = Physics2D.Raycast(rayLeft.position, -transform.up, rayLength, _layerMask);
        RaycastHit2D hitRight = Physics2D.Raycast(rayRight.position, -transform.up, rayLength, _layerMask);
        RaycastHit2D hitCentre = Physics2D.Raycast(rayCentre.position, -transform.up, rayLength, _layerMask);
        if (hitLeft.collider == null && hitRight.collider == null) return;

        _correctZ = Mathf.RoundToInt(Vector2.SignedAngle(Vector2.up, (hitLeft.normal + hitRight.normal + hitCentre.normal)/3));
        _correctZ /= 45;
        _correctZ *= 45;

        if (body.rotation != _correctZ && jumping && _jumpTimer > 0.5f || body.rotation != _correctZ && !jumping)
        {
            RotateZ(_correctZ);
        }
    }
´´´

and applied relative force:

´´´csharp
    if (groundedLeft && groundedRight) body.AddRelativeForce(magBootForce * Vector2.down, ForceMode2D.Force);
´´´

To make controlling the astronaut intuitive while running up walls, I also added a change in input

´´´´csharp
    if (gravity || !gravity && grounded && !horizontal) _targetSpeed = moveInput.x * _speed;
    else if (!gravity && grounded && horizontal) _targetSpeed = -moveInput.y * _speed;
´´´´

I should also add that I decided to flip (rotate 180&deg;) the astronaut when jumping in zero-G, figuring this would lead
to less complexity in movement.

![Astronaut alternating between normal and zero-G movement](img/portfolio/Pods/zerograv.gif "Gravity is toggled by the builder player.")

I briefly toyed with the idea of allowing the player to rotate the non-grounded astronaut
at whim but I still haven't made my mind up on that and time was running awfully short because one of the other
programmers had an exam to study for, then got sick, then his kids got sick in succession and then he was mandated to
spend Christmas and New Year with his family and so it was mostly up to just two of us the create the game. So, I also
got inputs and module behaviour, made all animations out of the supplied spritesheets and the animator, code for lethal
traps and the oxygen system.

The other programmer who was not sick had made a grid for the modules to adhere to as well as defined the layers and
composition of the actual modules and had written a start for module movement when we reshuffled responsibilities as a
result of being fewer than we had assumed to be. Taking over someone else's script for the first time was interesting
and is a bit special in a school project where it would be hugely unfair to rewrite someone else's code as everyone
needs to be able to show their contributions. As it was, I tested a lot of different designs but had to settle for
something that is less elegant but produced far fewer bugs: modules can never overlap.

Making the modules hatches was a fun challenge! When two modules dock next to each other, their hatches need to open
and when either module is later moved, both hatches need to close.

![Hatches responding to module movement](img/portfolio/Pods/hatches.gif "Not going to show you any bugs.")

´´´´csharp
    void CheckForOtherHatch()
    {
        RaycastHit2D hatchCheck = Physics2D.Raycast(checkForOtherHatch.position, Vector2.zero, Mathf.Infinity, HATCHLAYER);
        _otherHatchPresent = hatchCheck.collider;
        if (_otherHatchPresent && hatchCheck.collider != coll)
        {
            other = hatchCheck.collider.gameObject.GetComponent<Hatches>();

            if (other != null)          // red hatches are on the hatch layer but have no script attached and can thus return null
            {
                OpenHatch();

                if (other.module.floating) return;
                else
                {
                    other.OpenHatch();
                    other.other = this;
                }
            }
        }
    }
´´´´

´´´´csharp
public void CloseHatch()
    {
        if (coll.enabled == false) coll.enabled = true;
        openedHatch = false;
        spriteRenderer.enabled = true;

        if (other != null)
        {
            if (other.other != null) other.other = null;
            other.CloseHatch();
            other = null;
        }
        audioSource.clip = hClose;
        audioSource.Play();
        animator.Play("CloseHatch");
    }
´´´´

The game can be found on itch.